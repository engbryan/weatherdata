// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WeatherData.DataAccess;

#nullable disable

namespace WeatherData.Migrations
{
    [DbContext(typeof(WeatherDataContext))]
    partial class WeatherDataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.22")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("WeatherData.Models.AirportStatus", b =>
                {
                    b.Property<string>("codigo_icao")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("atualizado_em")
                        .HasColumnType("datetime2");

                    b.Property<string>("condicao")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("condicao_Desc")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("direcao_vento")
                        .HasColumnType("int");

                    b.Property<string>("pressao_atmosferica")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("temp")
                        .HasColumnType("int");

                    b.Property<int>("umidade")
                        .HasColumnType("int");

                    b.Property<int>("vento")
                        .HasColumnType("int");

                    b.Property<string>("visibilidade")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("codigo_icao");

                    b.ToTable("AirportStatus");
                });

            modelBuilder.Entity("WeatherData.Models.DayWeather", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"), 1L, 1);

                    b.Property<int?>("WeatherForecastcodCidade")
                        .HasColumnType("int");

                    b.Property<string>("condicao")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("condicao_desc")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("data")
                        .HasColumnType("datetime2");

                    b.Property<int>("indice_uv")
                        .HasColumnType("int");

                    b.Property<int>("max")
                        .HasColumnType("int");

                    b.Property<int>("min")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("WeatherForecastcodCidade");

                    b.ToTable("DayWeather");
                });

            modelBuilder.Entity("WeatherData.Models.ErrorLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ExceptionType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LogLevel")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StackTrace")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("ErrorLogs");
                });

            modelBuilder.Entity("WeatherData.Models.WeatherForecast", b =>
                {
                    b.Property<int>("codCidade")
                        .HasColumnType("int");

                    b.Property<string>("atualizado_em")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("cidade")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("estado")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("codCidade");

                    b.ToTable("WeatherForecast");
                });

            modelBuilder.Entity("WeatherData.Models.DayWeather", b =>
                {
                    b.HasOne("WeatherData.Models.WeatherForecast", null)
                        .WithMany("clima")
                        .HasForeignKey("WeatherForecastcodCidade")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("WeatherData.Models.WeatherForecast", b =>
                {
                    b.Navigation("clima");
                });
#pragma warning restore 612, 618
        }
    }
}
